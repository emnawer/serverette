{"version":3,"sources":["w3.copyright","serverette.js"],"names":["http","require","path","fs","url","resFile","reqUrl","response","type","rootDir","fsUrl","join","readFile","err","data","writeHead","Content-Type","write","Cache-Control","Pragma","Expires","end","mimeList","regex","callbacks","get","array","console","log","forEach","value","name","head","post","put","delete","options","patch","serverette","port","mime","functions","httpMethod","undefined","error","method","callback","Array","concat","createServer","request","urlParams","URL","search","searchParams","let","urlSanitize","split","map","item","test","message","i","length","body","on","dataStream","push","toString","listen","module","exports"],"mappings":"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","file":"../serverette.min.js","sourcesContent":["/*\tMIT License\n\tCopyright (c) 2024, Emnawer and others (https://github.com/emnawer) */\n\n","const http = require(\"http\");\nconst path = require(\"path\");\nconst fs = require(\"node:fs\");\nconst url = require('node:url');\n\n\nfunction resFile(reqUrl, response, type, rootDir) {\n    if (reqUrl == \"/\") reqUrl = \"/index.htm\";\n    const fsUrl = path.join(rootDir, reqUrl);\n\n    // console.log(\"fsUrl: \" + fsUrl);\n    fs.readFile(fsUrl, (err, data) => {\n        if (err) {\n            response.writeHead(404, { \"Content-Type\": \"text/html\" });\n            response.write(\"<h1>404 Not Found</h1>\");\n            // response.end();\n        } else {\n            response.writeHead(200, {\n                \"Content-Type\": type,\n                \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                Pragma: \"no-cache\",\n                Expires: \"0\",\n            });\n            response.write(data);\n            // response.end();\n        }\n        response.end();\n    });\n}\n\n\nvar mimeList = [\n    { regex: /\\/$|index\\.(html|htm)$/, type: \"text/html\" },\n    { regex: /\\.txt/, type: \"text/plain\" },\n    { regex: /\\.css/, type: \"text/css\" },\n    { regex: /\\.js/, type: \"text/javascript\" },\n    { regex: /\\.htm/, type: \"text/html\" },\n    { regex: /\\.html/, type: \"text/html\" },\n    { regex: /\\.png/, type: \"image/png\" },\n    { regex: /\\.jpg/, type: \"image/jpeg\" },\n    { regex: /\\.jpeg/, type: \"image/jpeg\" },\n    { regex: /\\.gif/, type: \"image/gif\" },\n    { regex: /\\.svg/, type: \"image/svg+xml\" },\n    { regex: /\\.ico/, type: \"image/x-icon\" },\n    { regex: /\\.xml/, type: \"text/xml\" },\n    { regex: /\\.json/, type: \"application/json\" },\n    { regex: /\\.eot/, type: \"text/vnd.ms-fontobject\" },\n    { regex: /\\.ttf/, type: \"font/ttf\" },\n    { regex: /\\.woff/, type: \"font/woff\" },\n    { regex: /\\.woff2/, type: \"font/woff2\" },\n    { regex: /\\.otf/, type: \"font/otf\" },\n    { regex: /\\.mp3/, type: \"audio/mp3\" },\n    { regex: /\\.mp4/, type: \"video/mp4\" },\n];\n\n\nvar callbacks = {\n    get: function(array, response) {\n        console.log(\"=============================\");\n        console.log(\"URL(GET) parameters found!\");\n        console.log(array);\n        array.forEach((value, name) => {\n            console.log(name, value);\n        });\n        console.log(\"=============================\");\n\n    },\n    head: function(array, response) { console.log(\"HEAD:\", array); },\n    post: function(array, response) {\n        console.log(\"POST:\", array);\n        response.writeHead(200, { 'Content-Type': 'text/html' })\n        response.end(\"POST data received!\")\n    },\n    put: function(array, response) { console.log(\"PUT:\", array) },\n    delete: function(array, response) { console.log(\"DELETE:\", array) },\n    // connect: function(array, response) { console.log(\"CONNECT:\", array) },\n    options: function(array, response) { console.log(\"OPTIONS:\", array) },\n    // trace: function(array, response) { console.log(\"TRACE:\", array) },\n    patch: function(array, response) { console.log(\"PATCH:\", array) },\n}\n\n\n// port = port number, rootDir = Root directory, mime must be an array with custom mime object(s)\nconst serverette = function(rootDir, port, mime, functions) {\n    if (undefined == rootDir) { console.error(\"ERROR: Root directory not specified!\"); return };\n     // var functions = {};\n    // functions.get = callbacks.get || w3scallback.get;\n    // functions.head = callbacks.head || w3scallback.head\n    // functions.post = callbacks.post || w3scallback.post\n    // functions.put = callbacks.put || w3scallback.put\n    // functions.delete = callbacks.delete || w3scallback.delete\n    // functions.options = callbacks.options || w3scallback.options\n    // functions.patch = callbacks.patch || w3scallback.patch\n    functions = functions || callbacks;\n    var httpMethod = [\n        { method: \"GET\", callback: functions.get },\n        { method: \"HEAD\", callback: functions.head },\n        { method: \"POST\", callback: functions.post },\n        { method: \"PUT\", callback: functions.put },\n        { method: \"DELETE\", callback: functions.delete },\n        // { method: \"CONNECT\", callback: functions.connect },\n        { method: \"OPTIONS\", callback: functions.options },\n        // { method: \"TRACE\", callback: functions.trace },\n        { method: \"PATCH\", callback: functions.patch },\n    ]\n    if (mime instanceof Array) mimeList.concat(mime);\n    port = port || 8080;\n    console.log(\"Serverette port #:\", port);\n    console.log(\"======================\");\n    http\n        .createServer(function(request, response) {\n            //console.log(\"URL request.url:\",\"http://localhost\"+request.url);\n            // var urlParams = new URL(\"http://localhost\" + request.url);\n            // console.log(\"request.method:\", request.method);\n            // if (undefined != paramCallback) {\n            //     paramCallback()\n            // } else if (urlParams.search) {\n            //     console.log(\"URL Parameters: (Search) \");\n            //     urlParams.searchParams.forEach((value, name) => {\n            //         console.log(name, value);\n            //     });\n            // }\n            if (request.method == \"GET\") {\n                var urlParams = new URL(\"http://localhost\" + request.url);\n                if (urlParams.search !== \"\") {\n                    functions.get(urlParams.searchParams)\n                }\n                let urlSanitize = request.url.split(\"?\")[0];\n                mimeList.map(function(item) {\n                    if (item.regex.test(urlSanitize)) {\n                        try {\n                            resFile(urlSanitize, response, item.type, rootDir)\n                            console.log(\"GET:\", urlSanitize, \"MIME:\", item.type);\n                            //console.log(\"MIME:\", item);\n                        } catch (err) {\n                            console.error(\"GET:\", urlSanitize, \"MIME:\", item);\n                            console.error(\"ERROR:\", err.message);\n                        }\n\n                    };\n                })\n                // var urlParams = new URL(\"http://localhost\" + request.url);\n                // console.log(\"request.method:\", request.method);\n                // console.log(\"urlParams.search:\", '\"' + urlParams.search + '\"');\n                //w3serverFunctions.get(urlParams.searchParams);\n                // if (urlParams.search !== \"\") {\n                //     w3serverFunctions.get(urlParams.searchParams)\n                // }\n            } else {\n                // All other methods start with index 1 to skip GET\n                for (let i = 1; i < httpMethod.length; i++) {\n                    if (request.method == httpMethod[i].method) {\n                        // console.log(httpMethod[i].method + \" Data:\")\n                        var body = []\n                        request.on(\"data\", function(dataStream) {\n                            // console.log(\"Data Buffer:\", dataStream)\n                            body.push(dataStream.toString());\n                        })\n                        request.on(\"end\", function() {\n                            httpMethod[i].callback(body, response);\n                            // response.writeHead(200, { 'Content-Type': 'text/html' })\n                            // response.end(httpMethod[i].method + \" data received!\")\n                        })\n                    }\n                }\n            }\n            // all http methods\n\n\n            // if (request.method == \"POST\") {\n            //     console.log(\"POST Data: \")\n            //     var body = []\n            //     request.on(\"data\", function(dataStream) {\n            //         console.log(\"Data Buffer:\", dataStream)\n            //         body.push(dataStream.toString());\n            //     })\n            //     request.on('end', function() {\n            //         console.log(\"End of data stream. Full POST:\", body) && postCallback(body);\n            //         response.writeHead(200, { 'Content-Type': 'text/html' })\n            //         // response.end('post received')\n            //     })\n            // } else if (request.method == \"PUT\") {\n            //     console.log(\"PUT Data: \")\n            //     var body = []\n            //     request.on(\"data\", function(dataStream) {\n            //         console.log(\"Data Buffer:\", dataStream)\n            //         body.push(dataStream.toString());\n            //     })\n            //     request.on('end', function() {\n            //         console.log(\"End of data stream. Full PUT:\", body) && putCallback(body);\n            //     })\n            // } else if (request.method == \"PATCH\") {\n            //     console.log(\"PATCH Data: \")\n            //     var body = []\n            //     request.on(\"data\", function(dataStream) {\n            //         console.log(\"Data Buffer:\", dataStream)\n            //         body.push(dataStream.toString());\n            //     })\n            //     request.on('end', function() {\n            //         console.log(\"End of data stream. Full PATCH:\", body) && updateCallback(body);\n            //     })\n            // } else {\n            //     // console.log(\"request.url: \" + request.url);\n            //     // MIME types: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types //\n            //     // remove any ?= from the URL\n            // }\n            // else\n            // RESPONSE:\n\n        })\n        .listen(port);\n}\n\n\nmodule.exports = {serverette, callbacks};"]}